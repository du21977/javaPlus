day2
多线程之间实现同步

1.为什么会有线程安全问题存在
当多个线程同时共享同一全局或者静态变量时，做写操作时，可能会发生数据冲突问题，也就是线程安全问题

抢火车票出现线程同步问题
 *
 * 当多个线程同时操作同一共享变量时，就可能出现数据冲突
 * 怎么解决线程安全？
 * 1.使用synchronized同步代码块,同步方法，同步方法用的this锁，就是那个类所对应的对象的this；同步代码块可以是this可以自己new Object
 *      静态同步方法使用类.class锁
 * 2.使用java1.5并发包 lock
 * 这种只适合单个的jvm，如果是集群，就不合适了，得用分布式锁zp--zookeeper


 死锁
同步代码块中嵌套同步代码块，这样一个线程要持有2个锁，如果其他线程也持有这两把锁，并且获取锁的顺序不一致，就会造成死锁
 死锁解决方式1--用thread1.join()该线程thread1先执行，其他线程等待，该线程执行完后，其他线程才能执行
 死锁解决方式2--用ReentrantLock，加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）


synchronized不能手动开锁解锁,而且还有性能问题
而lock需要手动开锁和解锁

java1.5  并发包：Lock  , 线程池Executor ，Condition，AtomicInteager

Condition condition = lock.newCondition();
condition.await()在lock中使用------类似在synchronized中使用wait
condition.signal()在lock中使用------类似在synchronized中使用notify()
condition.signalAll()在lock中使用------类似在synchronized中使用notifyAll()



