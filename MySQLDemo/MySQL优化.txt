
存储过程：就是一组SQL语句集
存储与函数的区别：
存储相当于模块，函数相当于模块中的一个方法

存储过程优点：执行速度快
存储过程缺点：sql语句是死的
------------------------------------------
mysql数据库优化
1.数据库设计---三大范式
什么是三大范式
2.数据库的索引(SQL调优)
唯一索引、主键索引、聚合索引、复合索引、默认普通的一个索引
3.SQL语句调优
4.分表分库(水平分割、垂直分割)
5.读写分离--(一个数据库读，一个数据库写)--提高io性能
6.存储过程
7.对mysql配置进行优化，最大并发数(连接数)my.ini文件
8.定时清理碎片
9.mysql服务器升级配置

----------------------------------------------------
1.数据库三大范式
范式1：具备原子性，不可分离，每列不能再分割，例如数据库表中的字段，id ,name不能再细分，而地址可以再细分，地址可以分多个表
范式2：只有一个主键，主键不能做具体的业务，例如订单号唯一，但是不能订单号不能是主键
范式3：不允许字段有重复冗余，例如有一个字段班级，字段的值都是1班和2班，那就再建一张表，主键为班级id,就是classid,
一班主键值为1，二班主键值为2，然后对应上，classid作为外键对应上前面会员表----就是两个字段不能有强关联关系
eg:在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息
不能100%的遵循范式3，需要关联，查询太多

---------------------------------慢查询-------------------------------------------

什么是慢查询：mysql默认有一个规定，只要10s内，没有响应返回结果，就把该条sql语句视为慢查询sql语句，
默认不会有日志记录，需要自己去配置慢查询日志记录，会把慢查询sql语句，都会存放在日志文件中
可以在日志中看看是哪些语句出现了慢查询
show status查看mysql服务器状态信息，例如看看执行插入了多少次，查看数据库的连接数，显示慢查询次数

---------------------------------索引优化-------------------------------------------
3.索引和索引的原理
索引用来快速寻找那些具有特定值记录，所有MySQL索引都以B-树形式保存
索引的主要作用：提高查询效率，
分类：
主键索引：
唯一索引：可以为null,值不能重复
组合(联合)索引：
全文索引：查找文章，缺点不支持中文，查找大文件一般用搜索引擎框架，solr,lucence
普通索引：
聚集索引：索引和数据存在一个文件中
注意：索引并不是加了效率就高

索引的原理：
底层是B-tree，用的二分查找折半查找
2的n次方会找n次就找到了，时间复杂度为log2为底n

索引的注意事项：
1.加了索引的条件中，不要用%去模糊查找，索引会失效--注意like后面%放在前面会失效，%放在后面，索引不失效
2.索引不会影响查询的效率，会影响增删改的效率，因为需要重新维护btree树表
3.使用or，条件都必须加上索引，只要有1个条件不加索引，就不会使用索引查找
4.查询中出现 where xx=null ，不会使用索引查找，如果用is null会使用索引查找
5.group by 不会使用索引，会全表扫描
6.对于创建的多列索引（复合索引），不是使用的第一部分就不会使用索引。
alter table dept add index my_ind (dname,loc); // dname 左边的列,loc就是右边的列
explain select * from dept where dname='aaa'\G 会使用到索引
explain select * from dept where loc='aaa'\G 就不会使用到索引


在什么场景下加索引
1.出现慢查询的时候，开始定位，肯定需要索引
2.一般是经常需要作为查找条件的，已经唯一几个值的字段的不要加索引，例如性别，状态值；频繁更新的字段不需要加索引
3.只查询，不增删改的字段


explain执行任务计划器找到查找是不是全局查找，看是不是有索引
就是在查询语句前面加explain就行
查出来的结果，如果type是ALL就是没有索引，是全表扫描

----------------------------------SQL语句调优-----------------------------------------------------------
group by 分组默认会排序，会耗时间，可以在后面加上 order by null来提高速度
查询中出现 where xx=null ，不会使用索引查找，如果用is null会使用索引查找


----------------------------------分表分库---------------------------------------------
分库：垂直分割，分布式微服务项目，每个服务都是对应一个数据库，这就是垂直分割，分库，和其他数据库互不影响
分表：水平分割
例如日志太多了，要把日志表分成多张表，就是把日志数据均匀的放到多张表中
分表之后有什么缺点:
1.分页查询
2.查询受限制，不根据id查后怎么办
解决办法
主表放所有数据
根据id查就查分表，不根据id，就查主表
阿里云数据库rds可以解决这个问题，底层实现了

----------------------------------读写分离---------------------------------------------
主从复制(mysql自带)、读写分离(主服务器读写、从服务器只读)(一般第三方mycat来设置)、集群
一主多备，一主一备
高可用：宕机了解决方案

读写分离产生的问题：数据库数据一致性问题
主MySQL写入后立马同步到从MySQL

读写分离的好处：提高IO性能

MySQL主从复制原理：
二进制sql执行文件
主从服务器一直长连接，有insert、update、delete操作时，会以日志形式存到二进制sql执行文件，
从服务器只需要将主服务器的二进制执行文件copy一份，然后执行就ok了，这样主从数据库数据就一致了

mysql主从复制步骤：
1.配置主从节点信息(server_id = )  配置my.cnf文件
2.主服务器给从服务器设置读取账号权限---执行命令
3.从服务器同步主服务器---执行命令，含有主服务器ip,账号、密码
以上步骤只设置一次就可以了

读写分离通过数据库中间件mycat来做，很类似于nginx的功能










